"""
区分：
函数名：一个内存地址
函数名()：    内存地址()    ====>执行了这个函数，并且得到这个函数的返回值
返回值：
    就是这个函数的结果
    return：
    函数一旦执行到它，立马退出，后面的代码不执行
    return 可以不写，默认给一个None
    return 后面可以不写数据，不写默认None，可以写多个，会形成元组
参数的基本原则：
    从左到右：一一对应
位置参数
    按照从左到右，将实参绑定给形参
关键字参数
    在调用函数的时候，按照key=value（变量名=变量值）的形式
默认参数
    定义的时候，可以给形参绑定一个具体的数据
    不绑定，就按照默认的来
    你传递了，按你的来

可变长度参数
    在定义函数的括号内，形参前加一个*号，参数长度可变，只能接受位置
    *形参名 == 元组  将你传递的所有元素组成一个元组
    将形参叫做args
    *args
命名关键字参数
    在定义函数的括号内，形参前加一个**号，参数长度可变
    组成一个字典
    只能传递关键字参数
    **kwargs
这两个可以混合使用，将两个结合起来，即可以接受位置参数，也可以接受关键字参数，任意数量，任意形式
只能在定义函数的时候
注意：
    在调用函数的时候，也有类似的做法
    1.*可以将你的元素，分成为一个个的数据
    若为字典，表示键
    实参里的个数和定义函数的变量数目相同
    2.**将字典的键值取出，与函数的形参一一对应，键的名字要和形参名相同

命名关键字参数：
    在定义函数括号里，在*后定义的参数，
参数的顺序问题：
定义函数：位置参数，默认参数，*args，命名关键字参数，**kwargs
调用函数：位置参数，关键字参数
"""
"""
python中存在三种内存空间
1.内建、内置名称空间
    启动python解释器时，默认的生成的空间
    用来存放python解释器一启动就产生的名字
    运行结束，销毁
2.全局名称空间
    执行代码时，产生的空间
    存放你程序产生的名字（非函数内部）
3.局部名称空间
    执行你的代码，函数内部的名字

顺序：内建>全局>局部
销毁：局部>全局>内建


"""






