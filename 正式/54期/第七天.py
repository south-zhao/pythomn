'''
str  先从字符串  内容是最多的   
先讲解  在划重点  那些是常用的  
字符串    
若干个字符的集合就是一个字符串 
字符串必须用引号包起来   一对单引号  一对双引号  三队引号  
需要注意的是：必须是成对的
有的编程语言里面  双引号可以用来解析变量，在Python没有这个说法
单引号，双引号都没区别
1. 处理字符串中的引号
    1. 用不同的引号包裹
        单引号包裹双引号
        双引号包裹单引号
    2. 对引号进行转义   \ 转义符号 
2. 遇到这个符号  \n我们需要做的是正常输出一个\n这么一个字符
    而不是换行   原始字符串  r''输出成为一个正常的符号而已，没有其他的意思了
3. 字符串换行    了解的知识点    
    python认为你一行代码最好不要超过79个字符
4. 长字符串   用三对引号包裹    用来输出一些有换行的长的字符串 
字符串也是可以用来索引和切片的   
索引和切片  字符串，列表，元组    语法和规则通用的  
[起始位置的索引:结束位置的索引:步长]
从起始位置的索引开始，按照步长一直最多到结束位置索引-1的那1个   
  所有的索引和切片   [数字]  数字值得都是索引  索引是从左往右  从0开始
    从右往左就是从-1开始
字符串可以相加   字符串+字符串  两个字符串拼接到一起去
字符串可以相乘   字符串*int    将这个字符串重复多少次
in    判断是否在
for循环  
len()   得到字符串里面字符的个数    
'''''
# a = "1'23"
# a = '1"23'
# a = '1\'23'
# a = '1\"23'
# print(a)
# print(r'\n')
# print(666)
# a = '我是老杨，我是老杨我我是老杨我是老杨我是老杨我是老杨我是老杨' \
#     '我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨我是老杨是老杨我是老杨我是老杨'
# print(a)
# a = '''秋名山上行人稀
#     常用车手较高低
#     秋名弯道依旧在
#     部件当年老司机
#         好诗好诗'''
# print(a)
# a = '123456789'
# print(a)
# print(a[4])    # 5
# print(a[-1])   # 9
# print(a[1:8])  # 索引
# print(a[1:8:2])
# print(a[::2])
# print(a[::-1])
# a = '老杨'
# b = '木易'
# print(a+b)
# print(a*3)
# print('我' in '我是老杨')
# print('我是' in '我是老杨')
# print('我老' not in '我是老杨')  #
# for x in '我是老杨':
#     print(x)
# print(len('我是老杨'))
'''
需要掌握的操作
字符串.strip()
1. 祛除掉左右两边的空格
字符串.strip('符号')   
2. 祛除掉左右两边的指定的符号
常用的，主要用于接受用户的输入的时候  不小心输入了空格 
以后我们用input 接受用户的输入的时候，一定要加上strip() 
strip()  去除左右两边的
lstrip()  去除左边的
rstrip()  只去除右边的


常用的   
字符串.split()     将这个字符串中按照空格去分隔，变成一个列表    
字符串.split('符号') 将这个字符串中按照指定的符号去分隔，变成一个列表    

字符串.lower()   将这个字符串变成小写  只有字母才有效果 
字符串.upper()   将这个字符串变成大写  只有字母才有效果
常用于什么时候  验证码      不区分大小写  

用户体验   尽可能的避免一些小错误  提升用户的使用体验       

字符串.startswith('字符')  
    判断字符串是不是以指定的字符开头的 
字符串.endswith('字符')
    判断字符串是不是以指定的字符结尾的 
    
'符号'.join(字符串)  
用指定的符号插入到这个字符串的每一个字符中间  

字符串.replace('要修改的字符','修改后的字符')
将这个字符串中的要修改的字符  替换成为 修改后的字符
字符串.replace('要修改的字符','修改后的字符',数字)
将这个字符串中的要修改的字符  替换成为 修改后的字符  只会更改多少次  由这个数字决定

字符串相关的操作还很多  不需要一个个的全部去记住  
这里可以去参考CSDN博客  自己看   能记住更好  
   
总结字符串我们必须记住的几个
索引和切片   字符串和元祖一样，只能看不能改  
相加==》拼接 相乘  ==》重复多少次
len()  得到字符串的字符个数
in     判断是否在
for    循环
strip()   常用于去除左右的空格
split()   按照空格去切割成为一个列表
休息5分钟   回来再继续  
dict  set   
字符编码  ===》 乱码现像  

'''
# a = '12345678'
# print(a[0])
# a[0] = '6'
# a = '            我是老杨                     '
# print(a)
# print(a.strip())
# a = '!!!我是老杨***#######***'
# print(a.strip('*'))
# pwd  = input('亲输入您的密码').strip()
# print(pwd)
# if pwd == '123':
#     print('登录成功')
# a = '1#2#3###4'
# print(a.split('#'))
# # ['1', '2', '3', '4']
# a = '1 2 3                               4'
# print(a)
# print(a.split())
# a = 'abcdefg'
# print(a.upper())
# a = 'ABCDEFG'
# print(a.lower())
# a = 'AEfg'
# b = input('请输入您的验证码').strip()
# if b.lower()==a.lower():
#     print('验证码成功')
# a = '1.jpg'
# print(a.endswith('jpg'))
# if a.endswith('jpg'):
#     print('这是一张jpg的图片')
# name = input('请输入您的账户').strip()
# if not name.startswith('a'):
#     print('您的账户必须是a开头的')
# a = '12345'
# print('&'.join(a))
# a = '我是老杨，我是老杨,我是老杨'
# print(a.replace('老杨','木易'))
# print(a.replace('老杨','木易'))
# print(a.replace('老杨','木易',2))
# a = '1234567888888'
# print(a.count('8'))
'''
字典
{键:值}
值可以是任意的数据类型
键只能是不可变数据类型   int  float  str  tuple  bool  常用的是str
字典中我们操作的都是键  
根据键去取值   字典是没有索引的，所以不能使用索引和切片     
len()  得到字典中键值对的个数
in     判断字典中有没有这个键
for循环   扩展：参考下面的代码 
字典[键]  得到这个键的值
字典[键] = 数据 
    如果存在这个键就表示修改这个键的值
    如果不存在这个键就表示添加这个键，后面的数据就是这个键的值
根据字典的键去得到这个键的值  
字典.get(键)
如果字典有这个键，就直接得到这个键的值
如果字典没有这个键，也不会报错，而是得到一个None
字典.get(键,默认值)
如果字典有这个键，就直接得到这个键的值
如果字典没有这个键，也不会报错，而是得到你写的默认值  

删除字典
字典.pop(键)  删除字典的这个键  会得到删除的这个键的值   
了解的知识点   
字典.popitem()  删除字典的最后一个键值对  
字典.update(新的字典)
用薪资点更新旧的字典，有就修改，没有就添加

总结下：
    字典需要记住的是
    字典[键]  获取这个键的值
    字典[键] = 数据  有这个键就更新数据，没有这个键就添加数据
    字典.get(键,默认值)   根据键去取值
    len()     获取字典的键值对的个数
    for      循环

'''
# a = dict()
# print(a)
# a = {'name':'老杨','age':18}
# a.update({'age111':19})
# print(a)
# print(a['111111'])
# print(a.get('1111111111'))  # 不会报错了，而是得到一个None
# print(a.get('1111111111',22222222))  # 不会报错了，而是得到一个2222
# print(a.get('name',22222222))  # 不会报错了，而是得到一个2222
# a.popitem()
# print(a)
# a['name111111'] = '木易'
# print(a)
# b = a.pop('name')
# # del a['name']
# print(a)
# print(b)
# print(len(a))
# print('name' in a)
# for x in a:
#     print(x)
#     print(a[x])  # a[x]    字典[键]   输出这个键的值
# for x,y in a.items():
#     print(x)
#     print(y)
# print(a.keys())  #
# print(a.values())  #
# print(a.items())  #
# for x in a:
#     print(x)
# for x in a.keys():  # 默认得到字典的键
#     print(x)
# for x in a.values():  # 直接得到字典的值
#     print(x)
# for x,y in a.items(): # 用两个变量来接受，第一个变量得到字典的键
# 第二个变量得到字典的值
#     print(x)
#     print(y)
'''
集合  集合我们的使用频率比较低   只会用于特定的场景之下 
{数据,数据}
元素的个数没有限制，元素只能是不可变数据类型
    str  int  float tuple  bool 
集合中的元素都是唯一的， 具备了去重的效果   
集合里面的元素是无序的

for循环
len()
in  

交集    CSDN的博客       
'''
# a = [1,2,3,4]
# print(type(a))
# # b = {1,'1',1.1,[1,2],{1,2},{'name':18}}
# b = {1,1,1,'1',(1,),True}
# print(type(b))
# a = {1,1,1,1,1,1,2,2,2,2}
# print(a)
# for x  in a:
#     print(x)
# a = [1,1,1,1,1,2,2]
# b = set(a)
# b = list(b)
# print(b)
# friends1 = {"zero","kevin","jason","egon"} # 用户1的好友们
# friends2 = {"Jy","ricky","jason","egon"}   # 用户2的好友们
# # 1.合集/并集(|)：求两个用户所有的好友（重复好友只留一个）
# print(friends1 | friends2)
# # 2.交集(&)：求两个用户的共同好友
# print(friends1 & friends2)
# # 3.差集(-)：
# print(friends1 - friends2) # 求用户1独有的好友
# # {'kevin', 'zero'}
# print(friends2 - friends1) # 求用户2独有的好友
'''
数据类型详解的总结
按照使用频率   必须记住的部分   
int/float/bool   str  list  dict  tuple 
str   list  tuple  可以索引，可以切片
str   tuple  不能修改
dict   根据键去取值 
len()  in   循环  str  list  dict  tuple  都具备这几个方法
str  
    strip  split  
list
    append 
dict
    get  
'''
'''
了解即可  ===》 面试的环节  有可能会被问道  在实际开发中不需要去注意到
当故事听   多任务 GIL 
GC  垃圾回收机制
什么叫垃圾  
一个程序要想运行  硬盘 ===》内存 ===》CPU
内存的空间是无限量的吗？      大小是固定的  

一个变量用完了，就可以称之为一个垃圾  既然是垃圾 就不能占内存空间
就应该被回收   Python中提供了垃圾回收机制   GC
1. 引用计数     引用计数为0 就会认定是垃圾  就应该被回收  
2. 标记清除     从栈区出发  找不到没有绑定关系   标记  清除  
3. 分代回收     
在实际开发中  python会自动管理你的内存     垃圾回收机制 
垃圾回收是一个线程  ===》多任务编程  Python的多线程
CPYTHON的GIL锁全局解释器锁  
'''

'''
到这里为止
python的基本语法部分 告一段落
从明天开始
字符编码    针对字符乱码现像
文件操作    利用python操作文件
函数  重中之重  难度也会高一点点
    装饰器
    函数对象
    函数的进阶
函数的章节  知识点比较多  理解的点 死记硬背的少  主要要理解
模块与包
常用模块
ATM 项目   三节课的时间   一个从0开始的一个项目  
    难  绕  没有新的知识点  但是多个知识点结合起来  很绕
基础语法一定要彻底的理解吃透    吃透本质
第一阶段就结束了

没别的   就是死记   
键盘敲烂 月薪过万 
再好的说明文档  也不能帮你敲下任何一行代码
编程一定是靠敲出来的  
'''

