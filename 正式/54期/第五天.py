"""
提示用户，让用户输入账户和密码，
如果账户是admin，密码是123，就打印XXX恭喜您登陆成功

两个条件要同时成立才是对的

让用户输入自己的名字
如果用户输入的是 张三，李四，王五，三者其中一个，就提示XX已经注册过

所有的符号一定是英文的
要完成一个功能  方式是多种多样的
要选择一种更好的方式

If you do not leave me and do not abandon me, you will live and die
你不离开我，我就和你同归于尽
你若不离不弃，我必生死相依
山无棱，天地合，乃敢与君绝
注重你写的代码的质量     只要能完成就行了


''"""
# name = input('请输入您的账户') # 接受到结果永远是字符串
# pwd = input('请输入您的密码')
# if name=='admin' and pwd == '123':
#     print(f'{name}恭喜您登陆成功  ')
# 更好的方式    1题
# name = input('请输入您的名字')
# a = ['张三','李四','王五']
# if name in a:
#     print(f'{name}已经注册过')
# if name == '张三' or name =='李四' or name == '王五':
#     print(f'{name}已经注册过')
# if name=='张三':
#     print(f'{name}已经注册过')
# if name=='李四':
#     print(f'{name}已经注册过')
# if name=='王五':
#     print(f'{name}已经注册过')
# a = {'name': 'a'}
# 不是语法报错  不符合PEP8的规范
# PEP8  python认为你的代码要怎么写更加好看一点
'''
分支结构      
现实生活   
1. 选择做或者不做              选择做或不做   
2. 选择做这个还是那个           二选一     
3. 选择这个还是那个还是另外的     多选一     
如果  条件:
    就做任意的事情
只有条件成立了，就做缩进里面的事情
如果不是缩进里面的事情，那就和条件无关了，
为什么要有缩进，这样才能搞懂，那些事情是满足条件才要做的   区分
if 条件:
    只要符合规定的代码  
缩进一般使用4个空格，也就是一个TAB键来表示
双分支：
如果 条件:
    就做什么事情1
否则:
    就做什么事情2
如果条件成立了，就做事情1，反之，只要条件不成立，就做事情2
if 条件:
    只要符合规定的代码
else:
    只要符合规定的代码

多分支
如果 条件1:
    就做事情1
或者 条件2:
    就做事情2
或者 条件3:
    就做事情3
...
会从上往下依次去判断条件是不是成立的，如果条件成立，就做对应的事情，其他的就不管了 
如果所有的条件都成立,按照顺序来，就做第一个成立的条件里面的，其他的不管
如果所有的条件都不成立,啥都不做啊   
如果 条件1:
    就做事情1
或者 条件2:
    就做事情2
或者 条件3:
    就做事情3
否则:
    就做什么事情
如果所有的条件都不成立,就做否则里面的那件事情
if 条件:
    只要符合规定的代码
elif 条件:
    只要符合规定的代码
elif 条件:
    只要符合规定的代码
...

if 条件:
    只要符合规定的代码
elif 条件:
    只要符合规定的代码
elif 条件:
    只要符合规定的代码
else:
    只要符合规定的代码
'''
# 判断两个数的大小
# if 1:  #
#     print(3)  # 任意的符合规定的代码   但是一定要有   0
#     print(3)
# else:
#     print(2)
#     print(2)
# 结果是：3
# 排除错误  少不了的
# 有错误  报错  运行的结果和你的与其不符合
# num  = int(input('请输入您的成绩'))
# if num>60:
#     print('及格了，可以不用挨打了')
# print('多一分浪费，少一分报废')
# 50  会发生什么情况？
# 单分支
# num  = int(input('请输入您的成绩'))
# if num>=60:
#     print('及格了，可以不用挨打了')
# else:
#     print('面对疾风吧！准备挨打吧！')
# print('多一分浪费，少一分报废')
# num  = int(input('请输入您的成绩'))
# if 60<=num<=100:
#     print('及格了，可以不用挨打了')
# elif num>100:
#     print('你要上天吗？')
# # else:
# #     print('不可能，绝对不可能')
# print('多一分浪费，少一分报废')
# 150   请问会发生什么  顺序来的
'''
如果 条件:
    就可以做什么事情   
这个事情是任意的   必须要有   可不可以在判断
嵌套
如果 条件1:
    就可以做什么事情
    如果 条件2:  
        就可以做什么事情1
        如果 条件3:
            就可以做什么事情1

缩进的本质  就是为了加以区分    缩进和要和if对应起来的      

如果 条件:
    就可以做什么事情1
就可以做什么事情2
条件成立了，到底该做那些事情？  不好区分  1   12  
没有缩进就表示和这个条件无关   缩进的才是和条件有关的  
'''
# if 1:
#     if 0:
#         if 0:
#             print(111)
#         print(2)
#     print(3)
# 注意缩进的层级关系
'''
pass   ===》 占位符   没意思，只是起到一个占着位置的作用 
作用：我们在构思代码的时候，用这个来占个位置    
在我们构思代码的时候，某些地方必须要有代码，才不会语法报错
但是我们还不知道写什么代码，就先用pass占位
'''
'''
三目运算
条件为真时的结果 if 判段的条件 else 条件为假时的结果
简写的方式  
if 判段的条件:
    条件为真时的结果
else:
    条件为假时的结果 
'''
# if 3:
#     print(3)
# else:
#     print(666)
# print(3) if 3 else  print(666)
# print(1) if 3>2 else print(2) if 4>3 else print(666) # 代码更少
# 相对复杂一点的情况，看起来没那么直观了
# 三目运算   只会用于简单的逻辑
# 看起来更繁琐
# if 3>2:
#     print(1)
# else:
#     if 4 > 3:
#         print(2)
#     else:
#         print(666)
# 休息5分钟  该打自己就打吧     该上 WC 去    再来一巴掌  真男人
# 最后一个知识点  循环  不要走开马上回来 循环 难度高一点点
'''
断言   
assert 条件  
如果这个条件是成立的，那就没事
如果这个条件是错的，就直接报错，你的程序就运行不下去了
为了避免以后出大错，宁愿在前面就将问题扼杀

扩展：
    报错不是目的 目的最终还是为了解决  
assert 条件,'可以加提示信息'
扩展：
    这个断言是可以不管它的
运行Python代码的方式有几种
    Python 路径  
自动的在你现在这个项目的位置打开了cmd
如果用 python -O 文件路径 的方式去运行这份Python的文件
就会忽略掉你的断言  
assert 0,'这里不能为0哦'
print(666) 
'''
'''
循环结构
    什么是循环  
        重复做某些事情
    为什么要有
        人类需要重复做一些事情   
计算机也要重复做一些事情
让一些代码重复的去做啊 
思考：重复有什么比较重要的东西？
    1. 重复的次数？
    2. 什么时候可以结束？                     
在python中有两种循环
while  条件循环     根据条件去循环
for    迭代循环     1. 目前对他的解释  用于依次的得到每一个数据
for循环能搞定的，while循环都能搞定，
但是while能搞定的，for循环不一定能搞定
while循环   条件循环   

while 条件:
    要重复做的事情
    要重复做的事情
本质：
1. 首先判断条件成立吗？
2. 条件成立，就去从下往下依次执行和这个条件对应的缩进里面的代码
3. 这个条件对应的缩进里面的代码执行完了以后，又去判断条件是不是成立
4. 如果还成立，继续
如果条件不成立了，就不在继续

条件一直成立，也就意味着一直重复，一直循环 ===》 死循环
1. 我们应该避免死循环     
2. 但是，我们很多时候需要死循环    
有的程序必须是一直运行的，不能停下来的  ===》必须保持死循环 
人  死循环  上班  
不上班 没饭吃  资本家  
他的奥迪  她老婆的迪奥 他孩子的奥利奥 
你的奥拓  她老婆的奥妙 你孩子奥数  奥特曼？  
严格意义上来讲，我们所说不要死循环  ==》不要纯计算无IO的死循环
避免：纯做事没休息  

对于while循环来说，需要让条件可以变成错的，因为如果条件不能变成错的
就成为了死循环了
怎么才能让条件变成错的    
    1. 变 ==》变量   是变量才可能变化
    2. 通常是数字   利用数字可以控制重复的次数   
    3. 让这个变量发生变化的代码一定能够执行得到  
        不然的话，没有执行到那不还是死循环
    4. 条件是变量还不够，应该是个判断，就可以实现控制重复的次数了    
本质和套路               
'''
# a = 0
# while a<10:
#     a += 1  # 10
# a = 0
# a+= 1   ===> a = a+1
# 要连续打印输出10次的666
# while 要注意的事情
# a = 0
# while a<10:
#     print(666)
#     a+=1
'''
为什么要有a = 3  因为必须先定义变量在使用变量
为什么是数字，因为利用数字才能实现控制重复的次数的目的
while a>0:
while是个语法表示要循环了，要重复做一些事情了
a>0 这是个条件，才能实现让条件可以变化，能退出这个循环的目的
不然就是死循环了
a-=1   执行到这个代码  才能让条件开始变化  

缩进的目的也是为了区分  到底那些代码是需要重复做的
'''
'''
假设循环就是去操场跑圈，你不能死循环，不能一直跑，因为go die
跑圈需要次数，重复做的事情需要有次数， 
这个次数由条件加上循环内部的代码联合实现的
然后，我们还要考虑两种情况
1. 跑着跑着，要立即离开操场了，不再跑圈了，
就是离开循环了，不再执行这个循环里面剩下来的代码了
break
2. 跑着跑着肚子痛，上厕所，你已经第4个圈跑了一半了
离开操作，回来从第五个圈跑圈，第4个圈剩余的部分不跑了
循环里面，10次循环，
continue 
break     退出这个循环   
    类似于  
continue  中断这一轮的循环，开始下一轮的循环

'''
# a = 0
# while a<10:
#     a+=1
#     if a==3:  #  如果a等于3了
#         break #  立即离开了这个循环，这个循环的代码都不执行了
#     print(a)
# 1
# 2
# a = 0
# while a<10:
#     a+=1
#     if a==3:     #  如果a等于3了
#         continue #  这一轮循环剩余的代码不执行
#     print(a)     # 这一句没执行
# 例子来理解
# 循环的轮数   ===》重复的次数
# break    离开循环 终止循环
# continue   离开这一轮循环  开始下一轮循环

'''
一个break或者continue只能对应一个循环
'''

# a = 0
# while a<10:
#     while a<10:
#         while a<10:
#             a=100
# 循环里面还有循环  那么总的循环次数
# 里面的循环出现了break或者continue 只能是退出和这个缩进对应的循环
# 而不是退出所有的循环
# break 和  continue  只能退出自己不能退出所有
# 还有一种退出循环方式    本质
# 直接让条件变假
# 终极的大招
# 如果你要写多重循环(循环里面嵌套循环)
# 让每一个循环的条件用同一个条件
# 然后只需要直接将这个条件变成假的，就可以做好一次性退出所有的循环了

'''
else    否则
while 条件:
    代码
else:
    代码
如果你的循环正常的执行完了，没有执行到break这个代码
那么就会执行else里面的代码了,用于收尾的工作 
while循环的几个重点了  for循环留在下周一讲解   
'''
a = 0
while a < 10:
    a += 1
    if a == 5:  # 如果a等于3了
        continue # 这一轮循环剩余的代码不执行
    print(a)
else:
    print('循环结束了')

'''
题目
    提示用户输入账号和密码
    如果账户是老杨，密码是123，就输出 恭喜老杨登基成功
    或者账户是木易，密码是321，就输出 恭喜木易登基成功
    否则。输出总有刁民想害朕

    提示用户输入账号和密码，有输入的三次机会
    如果账户是老杨，密码是123，就输出 恭喜老杨登基成功，程序结束 
    否则就输出账户或者密码错误，输出剩余的错误机会次数
    
    猜年龄游戏   假设年龄是88
    提醒用户输入年龄，如果猜对了，打印恭喜信息并退出
    如果猜错了，提示猜错了，最多尝试3次
'''
