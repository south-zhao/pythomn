"""
作业讲解：
提示用户输入账号和密码      input
如果账户是老杨，密码是123，就输出 恭喜老杨登基成功
或者账户是木易，密码是321，就输出 恭喜木易登基成功
否则。输出总有刁民想害朕

name = input('请输入您的账户')
pwd = input('请输入您的密码')
if name=='老杨' and pwd=='123':
    print('恭喜老杨登基成功')
elif name=='木易' and pwd=='321':
    print('恭喜木易登基成功')
else:
    print('总有刁民想害朕')
# 对于多分支的理解    更合理的方式呢？   可以更好的去扩展
a = {'老杨':'123','木易':'321'}
name = input('请输入您的账户')
pwd = input('请输入您的密码')
if name in a and a[name]==pwd:
    print(f'恭喜{name}登基成功')
else:
    print('总有刁民想害朕')

提示用户输入账号和密码，有输入的三次机会
如果账户是老杨，密码是123，就输出 恭喜老杨登基成功，程序结束
否则就输出账户或者密码错误，输出剩余的错误机会次数

a = 0
while a<3:
    # 这里面的代码只要条件成立就会重复执行
    name = input('请输入您的账户')
    pwd = input('请输入您的密码')
    if name == '老杨' and pwd == '123':
        print('恭喜老杨登基成功')
        break   # 立马退出循环了
    print('账户或者密码输入错误')
    print(f'你还有{2-a}次机会')
    a+=1

猜年龄游戏   假设年龄是88
提醒用户输入年龄，如果猜对了，打印恭喜信息并退出
如果猜错了，提示猜错了，最多尝试3次

a = 0
while a<3:
    age = input('请输入您的年龄')
    if age=='88':
        print('猜对了')
        break
    print(f'猜错了，你还有{2 - a}次机会')
    a += 1
break的作用   while  循环
''"""
'''
for循环    迭代循环   迭代取值  遍历    
'''
# a = [1,2,3,4,5]
# a = '12345'
# a = {'老杨':18,'木易':19}
# # a = [{'老杨':18,'木易':19},[1,2,3]]
# for x in a:
#     print(x)
# 效果  依次的将列表中的每一个元素打印出来了    遍历 ：依次得到每一个元素
# 本质：语法规范
# for 变量名 in 字符串/列表/字典/元祖/集合/文件:
#     任意的代码
# 本质：
# 1.  将a里面的第一个元素 自动绑定给名字 x
# 2. 执行for里面的代码
# 3. 里面的代码执行完了，再去讲a里面的第二个元素，自动绑定给x
# 4. 直到这个列表里面的元素已经没了，就不在执行这个的代码了
# 循环的次数由什么决定？ ===》 元素的个数决定的
# 主要用于快速的得到每一个元素
# 重复执行5次
# a = 0
# while a<5:
#     a+=1
# for x in 'nnnnn':
#     print(666)
# for x in range(3):
#     print(666)
# 主要用于快速重复代码多少次
# range(数字)  就会生成从0开始的到数字-1 的区间
# range(数字1,数字2)  就会生成从数字1开始的到数字2-1 的区间
# range(数字1,数字2,数字3)  就会生成从数字1开始的到数字 2-1 的区间
# 数字3值得是步长    数字1+步长  左闭右开
# for x in range(1,9,2):
# for x in range(1,3):
# for x in [1,2]:
# for x in [0,1,2]:
#     print(x)
# 666
# 可以和 while，for 通用  作用是一样的
# continue
# break
# else
# for x in '123':
#     if x=='2':
#         # break   # 直接退出循环
#         continue  # 本轮循环后面的代码不再进行了
#     print(x)
# else:
#     print('循环完了')  # 没有执行到break ，循环正常结束了，就会执行这里面的代码了
# 循环嵌套  里面可以写任意的代码  只要符合规范即可
# for x in '123':
#     print(x)
#     for y in '321':
#         print(x)    # 我得到是 1   2   3
#         print(y)    #  3    2     1
# 需要注意的一件事   但是最好不要协程一样的  避免混淆
# 流程控制  分支结构   循环结构

'''
不好的消息   东西很多
好消息      不难     死记硬背     
我会先将这些都讲一遍   重点要记的，我们会大量的用到的  
了解一下即可的     看到了知道是什么意思    以后需要用到了，翻笔记  

数据类型的详解   
数字类型   
    1. 数字可以数学运算 
    2. int()      强行将只有数字的字符串类型转换成为一个数字类型的数字 
                  将其他的进制的数字  转换为十进制的整数 
    3. float()    强行将只有数字的字符串或者整型类型转换成为一个数字类型的数字 
扩展，需要了解的
在计算机中有进制的说法   
二进制   0b
八进制   0o 
十六进制  0x   
逢几进一

精度丢失  是由于计算机底层是基于二进制进行换算的，所以会存在一些误差

'''
# print(10/3)
# print(0.1+0.2)  # 0.30000000000000004
# 解决精度丢失的问题
# import decimal
# a = decimal.Decimal('0.1')
# b = decimal.Decimal('0.2')
# print(a+b)
# a = '123'
# b = int(a)
# print(b)
# print(type(b))
# a = '123.2'
# b = float(a)
# print(b)
# print(type(b))
# a = 11
# print(a)   # 十进制的数字
# print(bin(a))  # 二进制的数字
# print(oct(a))  # 八进制的数字
# print(hex(a))  # 十六进制的数字

'''
列表的相关方法
1. 创建列表    list()  将其他的数据类型的每一个元素 转成列表 作为列表的元素
2. 访问列表    索引和切片       
'''
# a = []  # 创建一个空列表  推荐
# print(a)
# a = list()
# a = list('12345')  # 字符串，将每一个字符作为列表的一个元素
# a = range(1,6,2)
# a = {'老杨':18,'木易':19}  # 字典，就会将键作为列表的元素
# b = list(a)
# print(b)
# 和字典相关的  都是操作 字典的键 而不是值  因为我们可以通过键找到值
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# 列表[数字1]  得到这个索引位置的元素
# 列表[数字1:数字2]  得到数字1这个索引位置的元素到数字2-1的索引位置的元素
# 列表[数字1:数字2:数字3]  得到数字1这个索引位置的元素到数字2-1的索引位置的元素 步长为数字3
# 列表[::]
# 默认第一个:之前 默认为0   起始位
# 默认第二个:之前 默认到这个列表的元素的个数   结束位
# 默认第二个:之后 默认为1   步长
# print(a[0])  # 得到第一个索引的元素
# print(a[0:5])  # 得到第0个索引到5-1个索引的元素
# print(a[0:5:2])  # 得到第0个索引到5-1个索引的元素  步长为2
# 常用的一个操作  将列表倒序
# print(a[::-1])
# 休息5分钟  回来再继续    师傅领进门  修行在个人   笔记写的比较细
# 编程   int  float  列表  字符串  很多的
# 用到了才是学习  自己要具备自学的精神  自己去测试一下
# 删除列表
# a  = 1
# del a  # 将这个内存空间回收了   了解即可    Python  指针
# # 在python的底层有gc 垃圾回收机制 ，所以我们不需要去管理Python的内存了
# print(a)
# 给列表添加元素  任意的数据类型的  元素都可以了
# 常用的方法：
# 列表.append()  # 在这个列表的屁股后面追加一个元素  方法  ==》功能
# 列表.extend()  # 追加多个元素 每一个元素  不可以是 ： int float
# 列表.insert(索引的位置,你要加进去的元素)  # 将元素放在你指定的地位
# a = [1,2,3]
# a.insert(1,666)
# a.extend([1,2,3])
# a.extend(1)
# a.append(1)
# a.append('1')
# a.append([1,2,3])
# a.append({1:2})
# print(a)

'''
对列表的汇总
1. 按索引存取值(正向存取+反向存取)：即可存也可以取

'''
# 1.1 正向取(从左往右)
my_friends = ['tony', 'jason', 'tom', 4, 5]
# print(my_friends[0])
# # tony
# # 1.2 反向取(负号表示从右往左)
# print(my_friends[-1])

# 1.3 对于list来说，既可以按照索引取值，
# 又可以按照索引修改指定位置的值，但如果索引不存在则报错
# my_friends = ['tony', 'jack', 'jason', 4, 5]
# my_friends[1] = 'martthow'
# print(my_friends)

# 2.切片(顾头不顾尾，步长)
# 2.1 顾头不顾尾：取出索引为0到3的元素
# print(my_friends[0:4])
# ['tony', 'jack', 'jason', 4]
# 2.2 步长：0:4:2,第三个参数2代表步长，会从0开始，每次累加一个2即可，所以会取出索引0、2的元素
# print(my_friends[0:4:2])

# len()取得列表的元素的个数   常用的，需要记住
# print(len(my_friends))

# 4.成员运算in和not in
# print('tony' in my_friends)
# # True
# print('xxx' not in my_friends)
# True

# 5.添加
# 5.1 append()列表尾部追加元素
l1 = ['a', 'b', 'c']
# l1.append('d')
# print(l1)
# ['a', 'b', 'c', 'd']

# 5.2 extend()一次性在列表尾部添加多个元素
# l1.extend(['a','b','c'])
# print(l1)
# ['a', 'b', 'c', 'd', 'a', 'b', 'c']

# 5.3 insert()在指定位置插入元素
# l1.insert(0,"first")  # 0表示按索引位置插值
# print(l1)
# ['first', 'a', 'b', 'c', 'alisa', 'a', 'b', 'c']

# 6.删除
# 6.1 del
# l = [11,22,33,44]
# del l[2]  # 删除索引为2的元素
# print(l)
# [11,22,44]

# 列表.pop()  按照索引来删除列表的元素  默认是最后一个
# 默认删除列表最后一个元素，并将删除的值返回
# 括号内可以通过加索引值来指定删除元素
# l = [11,22,33,22,44]
# # res=l.pop()
# res=l.pop(2)
# print(res)
# print(l)

# 列表.remove()  删除列表中的那个   括号内的元素  没有返回值
# l = [11,22,33,22,44,'老杨']
# res=l.remove('老杨') # 从左往右查找第一个括号内需要删除的元素
# print(res)
# print(l)

# 7.reverse()颠倒列表内元素顺序
# l = [11,22,33,44]
# l.reverse()
# print(l)
# [44,33,22,11]

# 8.sort()给列表内所有元素排序
# 8.1 排序时列表元素之间必须是相同数据类型，不可混搭，否则报错
# l = [11,22,3,42,7,55]
# l.sort()
# print(l)
# #[3, 7, 11, 22, 42, 55]  # 默认从小到大排序
# l = [11,22,3,42,7,55]
# l.sort(reverse=True)  # reverse用来指定是否跌倒排序，默认为False
# print(l)
# # [55, 42, 22, 11, 7, 3]

# 排序的问题
# 数字可以比较大小
# 字符也可以比较大小  但是我们注意的是  字符串的比较大小值得是字符编码的顺序
# 字符之间的大小取决于它们在ASCII表中的先后顺序，越往后越大
# print(1>2)
# print('1'>'2')  # ascii

# a = [1,2,3]
# for x in a:
#     print(x)

'''
我们必须记住的
1. 列表可以用于for循环，依次得到列表中的每一个元素  元素的个数就控制了循环的次数
2. 列表.append(数据)  将数据追加在列表的屁股后面
3. 数据 in 列表  判断列表中有没有这个元素
4. 索引和切片    
列表[索引]   得到列表的那个索引的元素
列表[索引] = 数据   将列表的那个索引的元素改成新的数据  
其他的了解即可   以上4 个非常常用  
'''

'''
元组 ：什么是元组？
    就是一个不可以变化的列表   
    列表可以存放多个元素，然后添加元素 ，可以修改元素  
    但是元组可以存放多个元素，不能添加，不能修改(特殊情况下可以做到) 
    只读版本的列表  只能看不能改   
什么情况下会用到元组？
    如果你的数据不会发生变化了，不会去修改，不会去添加，就用元组，因为元组的性能比列表更好
    函数的返回值，默认就是元组的形式  
定义元组
用小括号包裹起来的多个元素  
注意: 如果括号内只有一个元素，必须在后面加一个, 不然元素是什么数据类型，就还是什么数据类型
逗号前面必须有数据      

1. 元组可以索引和切片
2. len() 得到元组的元素的个数
3. 可以循环元组
4. 可以判断成员运算 数据 in 元组  
扩展的   但是我们可以做到修改元祖
元祖内部的元素可以是任意的数据类型

我们说的元组里面的元素不能更改，值得是元祖的元素不能更改
我们可以更改元祖里面的元素的元素  


可变数据类型：值发生了改变，内存地址不改，ID没变，证明在更改原来的值  
    (list dict set) 
不可变数据类型：值发生了改变，内存地址也更改了，ID变了，怎么是没有改变原来的值
    而是产生了新的值，(int float str tuple)   
需要对本质有了解  就是如此
1. 为什么我们要用元祖，就是因为知道它不能改，如果你还要改，为什么不直接用列表呢？
2. 如果你的数据不会变化，就使用元祖而不是列表  

字符串  字典  集合   的相关方法讲完  知识点比较密集
字符串的方法是最多的

'''
# a = [1,2,3]
# print(a[0])
# a[0] = 3
# print(a)
# a.append(4)
# print(a)
# a = ()
# # a = ()
# # a = tuple()
# print(type(a))
# a = (1,2,3,4,5,6,7,8,9)
# print(a[0])
# print(a[0:4])
# print(a[0:8:2])
# print(len(a))
# print(a)
# print(1 in a)
# for x in a:
#     print(x)
# a = ([1,2,3],)
# a[0][0] = 666
# print(a)

# a = 1000
# print(id(a))
# a = 20000
# print(id(a))
# print(a)
# 值改了，  id 也  改了  不可变数据类型  int  float  str tuple
# 重新开房间，以前的不要了，将以前的名字有绑定到新的房间
# 值发生更改，值得是里面的元素更改  而不是整体更改的
# a = [1,2,3]
# print(id(a))
# print(id(a[0]))
# a[0] = 666
# print(id(a))
# print(id(a[0]))

# 列表里面的元素更改  不会影响这个列表的内存地址
# 元祖  为什么元祖里面的元素可以改里面的元素

# 886  退朝了
# 今天和明天的任务  将课上的代码复习 敲一遍  代码比较多
# 简单，但是多    就是敲
# 只要卷不死，就往死里卷
# 开句一键盘，其余都靠敲
