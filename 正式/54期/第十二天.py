'''
# 1. 利用函数，实现对任意一份文件的复制
# 2. 利用函数和参数，实现对两个数字比较大小，返回更大的数字
# 3. 利用文件操作实现，将用户输入的账户和密码，以追加的方式保存成文件 db.txt  注册功能  low逼版本的
# 4. 利用文件操作，实现将用户输入的账户和密码，与db.txt文件里面的账户和密码进行
# 对比，如果账户和密码都对，则提示登录成功，如果用户输入的账户和密码和db.txt文件
# 的账户和密码都对比不上，则提示账户或密码错误    登录功能   low逼版本的   
作业讲解:
通过这个作业 暴露了很多问题    

文件操作已经讲过了的   任意一份文件   二进制文件    先读取文件，再将文件内容写入性的文件
'''''
# 文件操作  函数的参数   利用参数可以实现动态的变化了    文件操作回顾
# def copy(a,b):
#     # a = '1.jpg'
#     # b = '2.jpg'
#     with open(a,'rb') as f1,open(b,'wb') as f2:
#         f2.write(f1.read())
# copy('1.jpg','2.jpg')
# 优化一下   2
# def a(b,c):
#     if b>c:
#         return b  # 函数执行到return就不会继续往西执行了
#     return c
# while True:  # 一个小功能  问题    数据库
#     b = input('请输入数字').strip()
#     c = input('请输入数字').strip()
#     if b.isdigit() and c.isdigit():
#         a(int(b), int(c))
#         break

# a(int(b),int(c))  # 强行对一个字符串转成整型
# 扩展一个知识点
# print(3>2)     # 数字的比较
# print('3'>'2')  # 字符串的比较   字符串的比较大小不是数学上的比较大小 ansi编码的位置顺序
# 注册功能
# 先看几个例子
'''
找问题：
    第一感觉：  我们写代码的   函数  可读性很差  
    乱  ===》代码冗余，重复的代码比较多
    
1. 无意义的代码没必要写
2. 文件都没关闭
3. 对循环的本质的理解以及break关键字的作用

再看正确的操作   语法方便  逻辑问题   现实生活有关系

字符串  in  字符串   看存不存在   
判断账户和密码对不对   对不对 在不在  是一码事吗？

以后开发一个功能  最low的方式，有效的方式
写中文思路
英文不好，所以不会编程   
中文思路  翻译成Python代码
按照我们现在的知识量完全达到了  我玩个一个小巷骚操作

注册：写一个注册功能我们必须要做什么

注册和登录的本质：
1. 注册  就是将账户，密码等信息按照特定的格式永久的保存起来   
2. 登录  就是将你的账户和密码 与保存好的账户密码对比  
可能会发生什么问题：
用户只有一个人吗？ 追加   因为需要保存多个用户   用户不能重复      
登录     1      追加进一份文件     
      账户     密码
用户A  abc     123
用户B  abc1    1234
用户C  abcd    12
问题：OK  
不同的用户  如何区分
同一个用户  账户和密码如何区分   
只要能解决区分的问题就行了  你有一种方式可以区分 就行  
字典  
{'abc':'123','abc1':'1234'}
一行就是一个用户   账户和密码  之间用:号隔开     
文件可以遍历的   可读性好         


解决一个问题有多种方式  最重要是抓住问题的本质  只要能解决这个本质  方式是多种多样的
注册    思维逻辑  OK了     1     
1. 需要用户输入账户，需要密码  
2. 账户不能重复  
3. 将账户和密码组织成特定的格式  (为了区分不同的用户，以及同一个用户的账户和密码) 

一种方式：
账户符号1密码符号2 的形式追加进入一份文件
备注：符号1用来解决账户和密码的区分
备注：符号2用来解决不同的用户的区分
2种方式  字典   等下模拟字典的方式    

登录的逻辑   
 本质是干什么：对比       
 将你输入的账户和密码与保存好的账户和密码对比
 如果账户和密码都对(同一个用户的账户和密码与你输入的账户密码都对) 
 如果只有账户或者密码对，就登陆失败 
 如果整个文件都对比不上，就表示没有该账号
小点：不要太老实  
实际开发中   账户或密码错误   你自己去猜   ===》为了增加你破解的难度  
以后要学会这种实际工作的套路  

  

1.  
'''
# a = '1111如果2222'
# b = a.replace('如果','if')
# print(b)

# with open('1.txt','r',encoding='utf-8') as f:
#     data = f.read()
# data = data.replace('如果','if')
# data = data.replace('打印','print')
# with open('2.py','w',encoding='utf-8') as f:
#     f.write(data)
# 本质   字符编码   Python解释器   本质
# 第一种方式  账户:密码\n   复杂   这个课后我们自己还需要去研究下
# ATM 项目中  我们优惠通过更好的方式去解决  因为还有很多不完善地方
# def zhuce():
#     name = input('请输入您的账户').strip()
#     pwd = input('请输入您的密码').strip()
#     # 如果我要不能让用户重复注册，必须先打开文件，看有没有这个用户存在
#     with open('db.txt','r',encoding='utf-8') as f:
#         for x in f:  # x  每一行的数据   1
#             n,p = x.strip('\n').split(':') # 基础知识点
#             if name == n:
#                 print('账户已经存在')
#                 return
#     # 查看用户是否已经存在了  账户肯定没有注册过
#     with open('db.txt','a',encoding='utf-8') as f:
#         data = f'{name}:{pwd}\n'
#         f.write(data)
#
# zhuce()
# 对文件的操作  函数的使用   逻辑的整理  如何开发一个新功能  思路
# 第二种
# 用字典的方式
# name = input('请输入您的账户').strip()
# pwd = input('请输入您的密码').strip()
# 查重  判断用户是否已经存在
# with open('db.txt','r',encoding='utf-8') as f:
#     data = f.read()
#     print(data)
# {'abc':'123'}

# def denglu():
#     name = input('请输入您的账户').strip()
#     pwd = input('请输入您的密码').strip()
#     # 打开文件，依次对比，先账户和密码是否都对
#     with open('db.txt','r',encoding='utf-8') as f:
#         for x in f:
#             n, p = x.strip('\n').split(':')
#             if name==n and pwd==p:
#                 print(f'{name}登录成功')
#                 break
#         else: # 整个文件都循环完了，都对比不上
#             print(f'{name}登录失败')
# 1. 我们要学会解决问题的思想，套路，技巧  捋清楚你的逻辑 用中文写出来思路

'''
将函数可以当做一个数据来看      
函数可以被引用    
函数可以作为一个元素     
函数也可以作为参数   
函数的返回值可以是一个函数    
'''
# def a():
#     print(666)
#
# # a()       # 直接执行这个函数
# # b = a()   # 执行这个函数，将这个函数的返回值绑定给b这个名字
# b = a     # 将函数a的内存地址绑定给b这个名字
# b()       # 执行函数a
# c = b()   # 执行函数a ,将返回值绑定给c这个名字
# c()       # 函数a的返回值()     None()  报错
# def a():
#     print(666)

# b = [a]
# b[0]()   # b[0] ==》函数a的内存地址()  执行函数a
# c = {'a':a}
# c['a']()
# d = (a,)
# d[0]()
# 调用函数的本质   函数的内存地址()   、
# def a(b):
#     print(b)
#     b()  # 函数c的内存地址()  None()
#
# def c():
#     print(777)
#     return 333
#
# # a(c)    # 将函数c的内存地址 作为实参传递给函数a
# a(c())  # 先执行函数c，再将函数c的返回值  作为实参传递给函数a

# 本质：
# 函数内存地址()  表示执行函数
# 函数名   保存的是函数的内存地址
# b = 1
# def a():
#     return lao      # 将函数lao的内存地址作为返回值返回出去
#
# def lao():
#     print(666)
#
# c = a()    # c = lao
# c()        # lao()  ===执行lao这个函数

# def a():
#     return b
# # b = 1  #
# def b():
#     print(666)
# c = a()   # 执行函数a  得到函数a的返回值  这个返回值是函数b的内存地址
# c()       # 执行函数b

# def a():
#     return b()   # 执行函数b，得到函数b的返回值，将这个返回值返回出去
#     return None
# # b = 1  #
# def b():
#     print(666)
# c = a()   # 执行函数a  得到函数a的返回值  这个返回值是函数b的返回值 None
# c()       # None()

'''
重点难点绕的点
定义函数不会执行函数的代码，只会检测基本的语法错误
定义函数发生的事情
1. 开辟内存空间
2. 将函数体代码放进去
3. 将这个内存地址绑定给函数名
导致：函数名 = 这个函数的内存地址
函数名 绑定了  这个函数的内存地址
函数的内存地址()   ===> 执行这个函数，得到这个函数的返回值
函数      内存地址
函数()    执行函数，得到返回值   

知识点就到这里  明天装饰器 
装饰器 ： 我们需要记住的是语法   
但是我会讲解推导的过程 这个东西我们自己如何推导出来 
推导过程 掌握了  函数就吃透了  
绕  函数的知识点的集合 基本上没有新的知识点  环环相扣
明天上课的时候    要尽可能的排除外界的诱惑  
要更上思路      
 
'''