"""
函数    很重要的知识点

"""
# 有一个数据，以后可能还会用到？
# 为什么要有变量，有一个数据以后需要用到，所以就可以用一个变量临时保存一下
# 功能  如果3>2这个条件成立，我就打印3>2
# 10个地方需要用到，复制粘贴10次就行了
# 有没有不方便的地方
# 1. 假如我复制的时候，复制错了，功能不完整  可能会出现的情况
# 2. 代码变得很多了，都是重复的代码，看起来也不好看    可读性变差
# 3. 复制了多少个地方，要改要改10个地方
# 要改就要改很多  重复的代码很多，不好看
'''
1. 代码冗余 (重复的代码多)
2. 可读性差 (不方便你看代码)
3. 扩展性差，维护性差(修改起来不方便)
'''
# 变量   将一个数据放在一个内存空间里面去
# 使用这个内存的空间   所以这个空间里面的数据改了
# 用到这个变量的地方数据也就自动改了
# 变量:可以用来保存一个数据   以后用到这个变量就表示用到这个数据
# 函数：可以用来保存一段代码  以后用到这个函数    用到这段代码
# 变量 ：必须先定义，再使用
# 定义变量： 将数据保存在一个内存地址里面
# 定义函数： 将一段代码保存在一个内存地址里面
'''
函数
    提前准备好一段代码  一段代码就是一个功能
    以后你需要用到这个功能的时候  就执行这个函数就行了
为什么要用到函数
    1. 代码冗余
    2. 可读性差
    3. 可维护性，可扩展性差 
函数的基本原则：
    1. 先定义,再使用
怎么定义函数  最基本的使用
定义函数的语法：
def 函数名():
    任意的代码
函数名的命名规范和变量名一样   
定义了一个函数，就好比是定义了一个功能
使用函数   函数名()
就好比是使用这个函数的功能   

以下这几句话非常关键
1. 定义函数   函数内部的代码不会执行
2. SyntaxError  语法错误  是会报错的  
定义函数，只会检测你的代码有没有语法错误，但是不会执行你的函数内部的代码
定义一个变量的本质： 一定要理解  
1. 开辟一个内存空间
2. 将变量值(数据)放到这个内存空间中去
3. 将这个内存空间的地址绑定给变量名  
定义函数的本质：
1. 开辟一个内存空间
2. 将函数体里面的代码(功能)放到这个内存空间中去
3. 将这个内存空间的地址绑定给函数名     函数的名字 = 一个内存地址 
使用变量的本质： 使用这个变量名绑定的内存空间的数据 
使用函数的本质: 使用这个函数名绑定的内存空间的里面的代码
内存空间()   ===>执行这个空间里面的代码 
也就意味着：只要你得到了这个内存空间,然后加一个() 就可以执行这个内存空间里面的代码了 

顺序：必须先定义，再使用
我们的顺序指的不是书写顺序，而是执行的顺序
再透彻一点：为什么必须先定义，在使用
因为如果没有执行到定义的代码，那么内存中还没有这个空间，然后你去使用，就找不到那个空间
只要你先执行了定义的代码，内存中就有了这个空间，那么你去使用，就可以找到这个空间
需要注意的：
    顺序问题：是执行顺序，不是书写顺序 
使用函数的本质   内存地址()    
只要吃透了本质   不管怎么变化  才能搞懂    
'''
# def a():
#     print(666)
# 发生什么现像
# '<function a at 0x000001D4F0183E20>'()
# print(a)
# a()  # 内存地址() ==> 执行这个内存地址的代码
# b = a   # 内存地址
# c = b
# d = c
# print(a)
# print(b)
# a()
# b()
# c()
# d()
# <function a at 0x00000210FB203E20>
# 函数名  一个内存地址  3  准备开始变形了
# 空函数    主要用于构思阶段
# def a():
#     pass  # 占位符
'''
函数
必须要有的
def 函数名():
    代码
其实完整版的函数如下
def  定义函数的关键字  必须有
函数名  和变量名一样，同样的命名规范 
()  必须有 
:  必须要有
代码必须有，缩进必须有
可有可无的
1. 参数:
2. 返回值:
3. 文档描述：对这个函数的注释：说明这个函数是干什么用的

工厂  工厂的名字   原材料   加工    产品
函数  函数名      参数     代码    返回值
人    人名       吃的东西  消化    排泄物  

返回值： 函数的结果  
1. 函数默认会有一个返回值    None  ===>False 
2. 函数里面出现了return   就表示将return后面的数据作为函数的结果丢出去
3. 函数只要执行到了return 后面的代码就不会继续往下执行了，就立即结束这个函数
4. return后面的数据可以没有，没有就表示是默认一个None
如果函数体内部，不写return或者return 后面没有数据，都是返回一个None
5. return 后面有一个数据，将这个数据返回出去
6. return后面可以有多个数据，每一个数据用,号隔开， 将这些数据作为一个元祖的元素返回出去
'''
# def a():
#     print('我是老杨')
#     return 3
#     print('我是老杨')
#     print('我是老杨')
#     print('我是老杨')
#     print('我是老杨')
# def a():
#     while True:
#         while True:
#             while True:
#                 print(1)
#                 return
# def a():
#     # pass
#     # return
#     return '1'
#     return 1,2
#     return 1,2,3

# print(a())
# print(type(a()))
# 元祖   基础
# a = ('1',)
# print(type(a))
# 如果一个()只有一个元素，不是元祖，这个元素是什么数据类型，就是什么数据类型

# def 函数名(参数):
#     '''对这个函数的注释'''
#     代码
#     return
# print(input()  )
# 程序会卡住，等待你的输入   ===》功能
# 接受你的输入  将你输入的结果丢出来

# def a():
#     print(1)
#     return 1
#     print(2)

# b = a        #  b 保存了内存地址
# c = b()      #  c = 内存地址()
# 执行这个函数  并且将这个函数的返回值 绑定给  c
# print(c)     #   1
# c()        #
# 一旦执行到return 后面的代码不会执行了
# 需要注意的：
# 变量名 = 函数名     将这个函数绑定的内存地址  绑定给变量名
# 变量名 = 函数名()   执行这个函数  将这个函数的返回值  绑定给变量
# 函数名括号加不加括号的区别  *****  虽然我在这里  还是会有同学在这里出错
# 今天这一节课的内容至关重要
'''
参数
    形式参数：形参    在定义函数的时候 放在括号里面的名字      类似于变量名
    实际参数: 实参    在调用函数的时候  放在那个括号里面的数据  类似于变量值
本质上：
    函数会自动的在执行函数的时候，将调用函数括号里面的实参，自动绑定给定义函数的形参
参数的原则：
    参数，可以有，可以没有，个数不限。
    从左到右，一一对应(形参和实参必须一一对应，缺一不可)
参数有什么意义呢？
    可以由调用函数来动态的去变化，更改函数的功能   进行更改    
一个函数就是一个功能，可能很多的地方都需要用到类似的功能，有点点的区别，参数来控制这个数据的变化
位置参数
关键字参数
默认参数
可变长度参数
命名关键字参数
时间关系肯定讲不完   位置参数 
位置参数：按照从走到右的顺序，一一对应，缺一不可 
关键字参数
在实参中(调用函数的括号里面)  按照 key=value的形式 给形参绑定具体的数据
默认参数
在形参中(定义函数的括号里面)  按照key=value的形式
如果实参中 不传递这个形参的值，就按照默认的来，传递了就按照你传递的来
如果要混合使用，必须是   value,key=value的顺序
位置参数  关键字参数  默认参数 
周一再去讲解 
本周六，日
今天的笔记知识点  重中之重  后续很多知识点的基础
务必将录播多看几遍   
尤其是我笔记中   写了几个例子 一定要研究下  
难度开始一点点的升级  ATM   有条件可以预习 没条件的也要复习
复习   +  预习  
为下周开始做准备  
下周一再见     有问题的提问题  没问题  散朝晚安  
'''
# def func(a=1,b=2,c=3):  # a = 1 b = 2 c = 3
#     print(a,b,c)
# # func(1,2,4)
# func(5,a=4,b=3)
# func(1,2,3)  #  1
# 我就希望不按照顺序来  关键字参数
# func(a=2,a=1,c=4,b=4)  #


# def a(name):  # 定义函数   name 是形参   name = '111'
#     print(name)
#
# a('111') # 调用函数
# 为什么我们不能用关键字作为 变量名 函数名  覆盖的现像

# a  = 1
# a = 2
# print(a)  #  2    被覆盖了啊
# def input():
#     pass
#
# 函数是一个功能  为了方便我们操作 Python默认个我们提供了一些函数
# 如果你自己又定义了函数  你的函数名也叫 覆盖了

